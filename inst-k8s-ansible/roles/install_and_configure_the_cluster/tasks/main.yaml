##Version : v2.1.5
- set_fact:
    var_k8s_ctrl_plane_node: "{{ ansible_host }}"
    var_k8s_user: "{{ ansible_user }}"

- name: Check if Kubernetes config images are already pulled
  become: true
  shell: |
    var_missing_images=0
    for var_image in $(kubeadm config images list | cut -d ":" -f 1)
    do
      if ! crictl -r unix:///run/containerd/containerd.sock images | grep -q "$(echo ${var_image} | awk -F'/' '{print $NF}')"
      then
        var_missing_images=1
      fi
    done
    exit $var_missing_images
  register: var_kubeadm_image_check
  changed_when: var_kubeadm_image_check.rc != 0
  failed_when: false
  ignore_errors: yes

- name: Notify if all Kubernetes config images are already pulled
  debug:
    msg: |- 
      Kubernetes config images are already pulled.
  when: var_kubeadm_image_check.rc == 0

- name: Wait until Kubernetes config images required for cluster creation are pulled
  become: true
  command: kubeadm config images pull
  when: var_kubeadm_image_check.rc != 0

- name: Check whether kubeadm init is performed already
  stat:
    path: /etc/kubernetes/admin.conf
  register: var_check_k8s_admin_conf_file

- name: Notify if kubeadm init is performed already
  debug:
    msg: |-
      kubeadm init is performed already
  when: var_check_k8s_admin_conf_file.stat.exists

- name: Create k8s cluster using kubeadm init with pod network {{ var_k8s_pod_network_cidr }}
  become: true
  command: kubeadm init --pod-network-cidr={{ var_k8s_pod_network_cidr }}
  when: not var_check_k8s_admin_conf_file.stat.exists

- name: Grant access to user {{ var_k8s_user }} to manage the k8s cluster
  shell: |
    mkdir -p /home/{{ var_k8s_user }}/.kube
    sudo cp -p /etc/kubernetes/admin.conf /home/{{ var_k8s_user }}/.kube/config
    sudo chown $(id -u {{ var_k8s_user }}):$(id -g {{ var_k8s_user }}) /home/{{ var_k8s_user }}/.kube/config

- name: Wait for Kubernetes API server to be healthy
  shell: curl -skL https://localhost:6443/healthz
  register: var_api_server_health_status
  until: var_api_server_health_status.stdout.find("ok") != -1
  retries: 100
  delay: 5

- name: Applying latest calico CNI  ( {{ var_calico_latest_version }} ) manifest from GitHub 
  shell: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/{{ var_calico_latest_version }}/manifests/calico.yaml

- name: Wait for control-plane to get Ready
  shell: kubectl get nodes | grep -w " Ready "
  register: var_control_plane_ready_status
  retries: 100
  until: var_control_plane_ready_status.stdout.find("Ready") != -1
  delay: 5

- name: K8s cluster control-plane node is Ready
  shell: kubectl get nodes
  register: var_nodes_status

- debug:
    msg: |-
      {{ var_nodes_status.stdout_lines }}

- name: Print join command and store the value to join the worker nodes
  command: kubeadm token create --print-join-command
  register: var_kubeadm_join_command_register

- name: Notify output of created join command
  debug:
    msg: |-
      {{ var_kubeadm_join_command_register.stdout_lines }}

- set_fact:
    var_kubeadm_join_command: "{{ var_kubeadm_join_command_register.stdout }}"

########################### EOF ##########################################
